---
import type { Recommendation } from "../lib/data"
import Star from "./Star.astro"
import Token from "./Token.astro"

let query = Astro.url.searchParams.get("stars")
let starsQuery = query ? parseInt(query!) : null

export interface Props {
    recommendation: Recommendation
}

let { recommendation } = Astro.props
let { slug, image, link, title, stars, description, tags } = recommendation

let showStars = !!stars
let starArray = Array(stars).fill(0)

let createdOn = new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
    // Fix because the frontmatter dates get parsed as GMT
    timeZone: "Europe/London",
}).format(recommendation.createdOn)
---

<div
    class="min-h-[264px] w-full flex flex-col items-center justify-center gap-5 border-2 border-black rounded-xl bg-[#FDFAF7] p-6 shadow-hard-lg sm:flex-row dark:bg-[#232326]"
    id={slug}
    transition:name={slug}
>
    {
        !!image && (
            <img
                alt=""
                class="aspect-[5/4] max-h-64 border-2 border-black object-cover shadow-hard sm:aspect-[2/3]"
                src={image}
            />
        )
    }

    <div class="min-h-[264px] w-full flex flex-col items-center justify-between">
        <div class="w-full flex flex-col items-center gap-3 pb-8 sm:items-start">
            <div class="flex flex-col items-center gap-4 pb-5 sm:flex-row sm:pb-0">
                <a
                    class="text-4xl font-sans hover:text-amber-500 dark:hover:text-purple-600"
                    href={link}
                    rel="noreferrer"
                    target="_blank"
                >
                    {title}
                </a>
                {
                    showStars && (
                        <a
                            class="group flex content-center items-center gap-3"
                            href={starsQuery ? "/" : `/?stars=${stars}`}
                        >
                            {starArray.map(() => (
                                <Star hover={true} />
                            ))}
                        </a>
                    )
                }
            </div>

            <span class="font-serif-text">{description}</span>
        </div>

        <div class="w-full flex flex-wrap items-center justify-between gap-4 pr-4">
            <div class="flex items-center gap-3">
                {tags.map(tag => <Token tag={tag} />)}
            </div>
            <a
                class="font-serif-text hover:text-amber-500 hover:underline dark:hover:text-purple-600"
                href={`#${slug}`}
            >
                {createdOn}
            </a>
        </div>
    </div>
</div>
